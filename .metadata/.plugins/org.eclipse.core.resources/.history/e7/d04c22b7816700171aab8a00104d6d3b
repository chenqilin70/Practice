package com.mysql.shopping.model.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import com.mysql.shopping.model.bean.Address;
import com.mysql.shopping.model.bean.Goods;
import com.mysql.shopping.model.bean.Orderitems;
import com.mysql.shopping.model.bean.Orders;

public class OrderDAOimp extends BaseDAOimp implements OrderDAO {
	

	@Override
	public boolean add(Object obj) {
		return false;
	}

	@Override
	public boolean delete(Object obj) {
		return false;
	}

	@Override
	public boolean update(Object obj) {
		return false;
	}

	@Override
	public Object listAll() {
		return null;
	}

	@Override
	public boolean saveorders(Orders o, HashMap<Goods, Integer> orderitmes) {
		Connection con=getConnection();
		try {
			con.setAutoCommit(false);
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		PreparedStatement pre=null;
		try {
			pre=con.prepareStatement("insert into orders value(?,now(),?,?,?,?)");
			pre.setString(1, o.getOrderid());
			pre.setInt(2, o.getStatus());
			pre.setInt(3, o.getUserid());
			pre.setInt(4, o.getAddressId());
			pre.setString(5, o.getMassage());
			int result=pre.executeUpdate();
			if(result==0)
				{
					con.rollback();
					return false;
				}
			int count=0;
			for(Goods g:orderitmes.keySet())
			{
				 pre=con.prepareStatement("insert into orderitems value(null,?,1,?,?)");
				 pre.setInt(1,orderitmes.get(g) );
				 pre.setString(2,o.getOrderid());
				 pre.setInt(3, g.getProductid());
				 count=pre.executeUpdate();
				 if(count==0){
						con.rollback();
						return false;
					}
				}
			con.commit();
			return  true;
		} catch (Exception e) {
			e.printStackTrace();
			try {
				con.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return false;
	}

	@Override
	public Orders listOrder(String orderId) {
		Orders  o=null;
		Address a=null;
		Set<Orderitems>  items=null;
		Connection  con=getConnection();
		PreparedStatement pre=null;
		ResultSet  rs=null;
		try {
			pre=con.prepareStatement("select o.*,oi.*,a.* from orders as o ,orderitems as oi,address as a where o.orderid=oi.orderid and o.addressid=a.addressid and o.orderid=?");
			pre.setString(1, orderId);
			rs=pre.executeQuery();
			while(rs.next())
			{
				if(o==null)
				{
					o=new Orders();
					o.setOrderid(rs.getString("o.orderid"));
					o.setTime(rs.getString("time"));
					o.setStatus(rs.getInt("status"));
					o.setUserid(rs.getInt("userid"));
					o.setAddressId(rs.getInt("addressid"));
				}
				if(a==null)
				{
					a=new Address();
					a.setAddressId(rs.getInt("addressid"));
					a.setProvince(rs.getString("province"));
					a.setCity(rs.getString("city"));
					a.setArea(rs.getString("area"));
					a.setStreet(rs.getString("street"));
					a.setDetail(rs.getString("detail"));
					a.setTel(rs.getString("tel"));
					a.setUser(rs.getString("user"));
					o.setAdd(a);
				}
				if(items==null){items=new HashSet<>();}
				Orderitems  item=new Orderitems();
				item.setCount(rs.getInt("count"));
				item.setDiscount(rs.getFloat("discount"));
				item.setOrderid(rs.getString("o.orderid"));
				item.setOrderitemid(rs.getInt("orderitemid"));
				item.setProductid(rs.getInt("productid"));
				items.add(item);
			}
			o.setItems(items);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return o;
	}

	@Override
	public ArrayList<Orders> listallorder(String userid) {
		ArrayList<Orders> os=new ArrayList<>();
		Connection con=getConnection();
		PreparedStatement pre=null;
		ResultSet rs=null;
		try {
			pre=con.prepareStatement("select o.*,a.* from orders as o,address as a where  o.addressid=a.addressid and o.userid=?");
			pre.setInt(1, Integer.parseInt(userid));
			rs=pre.executeQuery();
			while(rs.next())
			{
				Orders o=new Orders();
				o.setUserid(rs.getInt("userid"));
				o.setTime(rs.getString("time"));
				o.setStatus(rs.getInt("status"));
				o.setOrderid(rs.getString("o.orderid"));
				Address a=new Address();
				a.setAddressId(rs.getInt("addressId"));
				a.setProvince(rs.getString("province"));
				a.setCity(rs.getString("city"));
				a.setArea(rs.getString("area"));
				a.setStreet(rs.getString("street"));
				a.setDetail(rs.getString("detail"));
				a.setTel(rs.getString("tel"));
				a.setUser(rs.getString("user"));
				o.setAdd(a);
				os.add(o);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
				
		return os;
	}

	@Override
	public void addStatisticalData()  {
		Connection con=getConnection();
		PreparedStatement ps=null;
		try {
			ps=con.prepareStatement("insert into orders value(?,?,?,?,?,?)");
			ps.setString(1, "stat"+UUID.randomUUID().toString()+new Date().getTime());
			ps.setDate(2, getgetVirtulDate());;
			ps.setInt(3, 1);
			ps.setInt(4, 1);
			ps.setInt(5, 1);
			ps.setString(6, "统计专用数据，请勿修改");
			int result=ps.executeUpdate();
			System.out.println("成功插入数据："+result+"条");
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}finally{
					try {
						con.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}
		}
		
	}

	private Date getgetVirtulDate() {
		
		
		return null;
	}
}
