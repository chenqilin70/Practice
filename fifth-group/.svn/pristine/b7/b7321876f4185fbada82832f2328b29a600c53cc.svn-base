package com.mysql.shopping.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import admin.com.oracle.model.bean.BackstageUser;
import admin.com.oracle.model.bean.Identity;
import admin.com.oracle.model.bean.Limitbean;

public class BackstageUserDAOImp extends BaseDAOimp implements BackstageUserDAO {

	@Override
	public boolean add(Object obj) {
		BackstageUser user=(BackstageUser)obj;
		//获取一个连接
		Connection c=getConnection();
		PreparedStatement pre=null;
		try {
			pre=c.prepareStatement("insert into USERMANAGE values(?,?,?,?,?,?,?,?)");
			pre.setInt(1, user.getUserid());
			pre.setString(2, user.getUsername());
			pre.setString(3, user.getPassword());
			pre.setString(4, user.getRealname());
			pre.setString(5, user.getEmail());
			pre.setString(6, user.getSex());
			pre.setInt(7, user.getAge());
			pre.setInt(8, user.getOnline());
			pre.setInt(9, user.getIdentityid());
			int i=pre.executeUpdate();
			if(i==0){
				return false;
			}else{
				return true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated method stub
		disposeResource(c, pre);
		return false;
		
	}

	@Override
	public boolean delete(Object obj) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean update(Object obj) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object listAll() {
		// TODO Auto-generated method stub
		return null;
	}
	
	//获取权限比当前用户低的用户
	public List<BackstageUser> getcontroluser(BackstageUser user){
		Connection c=getConnection();
		PreparedStatement pre=null;
		ResultSet res=null;
		List<BackstageUser> l=null;
		try {
			pre=c.prepareStatement("select * from USERMANAGE where identityid>?");
			pre.setInt(1, user.getIdentityid());
			res=pre.executeQuery();
			l=new ArrayList<>();
			while(res.next()){
				BackstageUser b=new BackstageUser();
				b.setUserid(res.getInt("userid"));
				b.setUsername(res.getString("username"));
				b.setPassword(res.getString("password"));
				b.setRealname(res.getString("realname"));
				b.setEmail(res.getString("email"));
				b.setSex(res.getString("sex"));
				b.setAge(res.getInt("age"));
				b.setOnline(res.getInt("online"));
				b.setIdentityid(res.getInt("identityid"));
				b.setPosition(getposition(b.getIdentityid()));
				l.add(b);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		disposeResource(c, pre, res);
		return l;
	}
	
	//获取比当前用户权限低的身份表
	public Set<Identity> listcontrolidentity(BackstageUser user){
		//获取一个连接
		Connection c=getConnection();
		PreparedStatement pre=null;
		ResultSet res=null;
		Set<Identity> se=null;
		try {
			pre=c.prepareStatement("select * from IDENTITY where identityid>?");
			pre.setInt(1, user.getIdentityid());
			res=pre.executeQuery();
			se=new HashSet<>();
			while(res.next()){
				Identity i=new Identity();
				i.setIdentityid(res.getInt("identityid"));
				i.setPosition(res.getString("POSITION"));
				se.add(i);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		disposeResource(c,pre,res);
		return se;
	}
	
	
	//获取用户的权限
	public Set<Limitbean> getlimit(BackstageUser user){
		Connection c=getConnection();
		PreparedStatement pre=null;
		ResultSet res=null;
		
		try {
			pre=c.prepareStatement("select i.*,l.* from ID_LIMIT as i,LIMITTABLE as l where l.limitid=i.limitid and i.identityid=? ");
			pre.setInt(1, user.getIdentityid());
			res=pre.executeQuery();
			Set<Limitbean> i=new HashSet<>();
				while(res.next()){
					Limitbean l=new Limitbean();
					l.setLimitid(res.getInt("limitid"));
					l.setLimitaction(res.getString("limitaction"));
					l.setLimitcontrol(res.getString("limitcontrol"));
					i.add(l);
				}
			disposeResource(c, pre, res);
			return i;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		disposeResource(c, pre, res);
		return null;
	}
	
	//获取所有的身份
	public Set<Identity> listidentity(){
		//获取一个连接
		Connection c=getConnection();
		PreparedStatement pre=null;
		ResultSet res=null;
		Set<Identity> se=null;
		try {
			pre=c.prepareStatement("select * from IDENTITY");
			res=pre.executeQuery();
			se=new HashSet<>();
			while(res.next()){
				Identity i=new Identity();
				i.setIdentityid(res.getInt("identityid"));
				i.setPosition(res.getString("POSITION"));
				se.add(i);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		disposeResource(c,pre,res);
		return se;
	}
	
	
	public int getidentityid(String position){
		Set<Identity> id=listidentity();
		for (Identity identity : id) {
			if(identity.getPosition().equals(position)){
				return identity.getIdentityid();
			}
		}
		return 0;
	}
	
	public String getposition(int id){
		Set<Identity> iden=listidentity();
		for (Identity identity : iden) {
			if(identity.getIdentityid()==id){
				return identity.getPosition();
			}
		}
		return null;
	}


}
